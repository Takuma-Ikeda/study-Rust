/*
 * 所有と借用
 * 所有権とは「とある変数が値を保持している」状態を表す
 * 原則 1 つの変数のみが値を保持できるルール
 * つまり、所有権が移動したり、変数定義スコープを抜けるとメモリ開放される仕組み
 * 所有権を移動せず、別の変数が値参照できる「借用 (参照)」というシステムもある
 */
pub fn example() {
    // 1. ブロック内で所有権ムーブする例
    {
        let x = String::from("hello");

        // 所有権を y に移動
        let y = x;
        println!("y:{}", y);

        // x の所有権は y に移動済みなので x はもう使えない
        // println!("{}", x);
    } // このスコープを抜けると y はメモリ解放される

    // 2. 借用 (参照) パターン
    {
        let z = String::from("hello");
        {
            // 変数名に & を付けると、値を借用 (参照) できる
            let w = &z;
            println!("w:{}", w);

            // 貸してるので、変数 z の手元に値はない。よってエラーになる
            // let s = z;
        } // このスコープを抜けると w はメモリ解放される
        println!("z:{}", z);
    } // このスコープを抜けると z はメモリ解放される
}
